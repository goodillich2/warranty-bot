import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from data_loader import search_model, get_usd_rate, usd_cache
from utils.pdf_gen import create_pdf
from aiogram.types import InputFile
from handlers.warranty import register_warranty_handlers

API_TOKEN = "8097292310:AAGsi0tjJZoR43JI_kc7tGv6Tp2qz2iQeWQ"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

popular_models = [
    "12", "12 Pro Max", "13", "13 Pro", "13 Pro Max",
    "14", "14 Pro", "14 Pro Max", "15", "15 Pro",
    "15 Pro Max", "16", "16 Pro", "16 Pro Max", "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"
]

popular_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
for i in range(0, len(popular_models), 2):
    popular_keyboard.row(*(KeyboardButton(m) for m in popular_models[i:i+2]))

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("üîç –ù–∞–ø–∏—à–∏ –º–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 12 Pro Max)", reply_markup=popular_keyboard)

@dp.message_handler(commands=['help'])
async def help_cmd(message: types.Message):
    await message.answer(
        "üõ† –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start ‚Äî –ü–æ—á–∞—Ç–∏ –ø–æ—à—É–∫\n"
        "/rate ‚Äî –ü–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å –¥–æ–ª–∞—Ä–∞\n"
        "/reload ‚Äî –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫—É—Ä—Å/–¥–∞–Ω—ñ\n"
        "/warranty ‚Äî –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π —Ç–∞–ª–æ–Ω\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
    )

@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
async def help_button(message: types.Message):
    await help_cmd(message)

@dp.message_handler(commands=['rate'])
async def usd_rate_cmd(message: types.Message):
    rate = get_usd_rate()
    await message.answer(f"üí± –ü–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å –¥–æ–ª–∞—Ä–∞: {rate} –≥—Ä–Ω")

@dp.message_handler(commands=['reload'])
async def reload_data(message: types.Message):
    usd_cache["timestamp"] = 0
    rate = get_usd_rate()
    await message.answer(f"üîÅ –î–∞–Ω—ñ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.\nüí± –ê–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å: {rate} –≥—Ä–Ω")

@dp.message_handler(lambda message: not message.text.startswith('/'))
async def search(message: types.Message):
    query = message.text.strip()
    results = search_model(query)

    if not results:
        await message.answer("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    await message.answer(f"üîé –ó–Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(results)}")
    for item in results:
        serials = item['–°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞']
        text = (
            f"üì± <b>{item['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}</b>\n"
            f"üî¢ –°–µ—Ä—ñ–π–Ω–∏–π: {serials}\n"
            f"üíµ –¶—ñ–Ω–∞: {item['–†–æ–∑–Ω–∏—á–Ω–∞—è']} $\n"
            f"üá∫üá¶ –í –≥—Ä–∏–≤–Ω—ñ: {item['–¶—ñ–Ω–∞ –≤ –≥—Ä–Ω']} –≥—Ä–Ω"
        )
        await message.answer(text, parse_mode="HTML")

async def set_commands(bot: Bot):
    await bot.set_my_commands([
        types.BotCommand("start", "–ü–æ—á–∞—Ç–∏ –ø–æ—à—É–∫"),
        types.BotCommand("rate", "–ö—É—Ä—Å –¥–æ–ª–∞—Ä–∞"),
        types.BotCommand("reload", "–û–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å"),
        types.BotCommand("warranty", "–ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π —Ç–∞–ª–æ–Ω"),
        types.BotCommand("help", "–î–æ–ø–æ–º–æ–≥–∞")
    ])

if __name__ == "__main__":
    async def on_startup(dispatcher):
        register_warranty_handlers(dispatcher)
        await set_commands(bot)

    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
