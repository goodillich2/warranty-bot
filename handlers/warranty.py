# handlers/warranty.py

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import Dispatcher
from aiogram.types import InputFile
from utils.pdf_gen import create_pdf
from datetime import datetime

class WarrantyFSM(StatesGroup):
    waiting_for_model = State()
    waiting_for_serial = State()
    waiting_for_price = State()
    waiting_for_duration = State()


def register_warranty_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_warranty, commands="warranty", state="*")
    dp.register_message_handler(handle_model, state=WarrantyFSM.waiting_for_model)
    dp.register_message_handler(handle_serial, state=WarrantyFSM.waiting_for_serial)
    dp.register_message_handler(handle_price, state=WarrantyFSM.waiting_for_price)
    dp.register_message_handler(handle_duration, state=WarrantyFSM.waiting_for_duration)


async def cmd_warranty(message: types.Message):
    await message.answer("üì± –í–≤–µ–¥–∏ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    await WarrantyFSM.waiting_for_model.set()


async def handle_model(message: types.Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.answer("üî¢ –í–≤–µ–¥–∏ —Å–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä:")
    await WarrantyFSM.waiting_for_serial.set()


async def handle_serial(message: types.Message, state: FSMContext):
    await state.update_data(serial=message.text)
    await message.answer("üí∞ –í–≤–µ–¥–∏ —Ü—ñ–Ω—É –≤ –≥—Ä–Ω:")
    await WarrantyFSM.waiting_for_price.set()


async def handle_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text.strip())
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ —Ü—ñ–Ω—É —á–∏—Å–ª–æ–º!")
        return
    await state.update_data(price=price)
    await message.answer("üìÜ –í–≤–µ–¥–∏ —Ç–µ—Ä–º—ñ–Ω –≥–∞—Ä–∞–Ω—Ç—ñ—ó (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ Enter –¥–ª—è 3 –º—ñ—Å—è—Ü—ñ):")
    await WarrantyFSM.waiting_for_duration.set()


async def handle_duration(message: types.Message, state: FSMContext):
    user_input = message.text.strip()
    
    # –ï—Å–ª–∏ –ø—É—Å—Ç–æ –∏–ª–∏ –ø–ª—é—Å ‚Äî —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "3"
    duration = "3" if user_input == "+" or not user_input else user_input

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: duration –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º
    if not duration.isdigit():
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—è—Ü—ñ–≤ –≥–∞—Ä–∞–Ω—Ç—ñ—ó —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 3, 6, 12)")
        return

    data = await state.get_data()

    path = create_pdf(
        model=data["model"],
        serial=data["serial"],
        price=data["price"],
        warranty=duration  # —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ ‚Äî "3", "6", –∏ —Ç.–¥.
    )

    await message.answer_document(InputFile(path), caption="‚úÖ –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π —Ç–∞–ª–æ–Ω –≥–æ—Ç–æ–≤–∏–π!")
    await state.finish()


